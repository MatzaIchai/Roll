// Generated by gencpp from file projet/IMU.msg
// DO NOT EDIT!


#ifndef PROJET_MESSAGE_IMU_H
#define PROJET_MESSAGE_IMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace projet
{
template <class ContainerAllocator>
struct IMU_
{
  typedef IMU_<ContainerAllocator> Type;

  IMU_()
    : YAW(0.0)
    , PITCH(0.0)
    , ROLL(0.0)  {
    }
  IMU_(const ContainerAllocator& _alloc)
    : YAW(0.0)
    , PITCH(0.0)
    , ROLL(0.0)  {
  (void)_alloc;
    }



   typedef float _YAW_type;
  _YAW_type YAW;

   typedef float _PITCH_type;
  _PITCH_type PITCH;

   typedef float _ROLL_type;
  _ROLL_type ROLL;




  typedef boost::shared_ptr< ::projet::IMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::projet::IMU_<ContainerAllocator> const> ConstPtr;

}; // struct IMU_

typedef ::projet::IMU_<std::allocator<void> > IMU;

typedef boost::shared_ptr< ::projet::IMU > IMUPtr;
typedef boost::shared_ptr< ::projet::IMU const> IMUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::projet::IMU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::projet::IMU_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace projet

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'projet': ['/var/lib/cloud9/Robotics_Cape_Installer/catkin_ws/src/projet/msg'], 'geometry_msgs': ['/var/lib/cloud9/Robotics_Cape_Installer/catkin_ws/src/geometry_msgs/msg'], 'std_msgs': ['/opt/cloud9/ros_catkin_ws/src/std_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::projet::IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::projet::IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::projet::IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::projet::IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::projet::IMU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::projet::IMU_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::projet::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f112f250a60522c693be80ef8484ac2c";
  }

  static const char* value(const ::projet::IMU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf112f250a60522c6ULL;
  static const uint64_t static_value2 = 0x93be80ef8484ac2cULL;
};

template<class ContainerAllocator>
struct DataType< ::projet::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "projet/IMU";
  }

  static const char* value(const ::projet::IMU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::projet::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 YAW\n\
float32 PITCH\n\
float32 ROLL\n\
";
  }

  static const char* value(const ::projet::IMU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::projet::IMU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.YAW);
      stream.next(m.PITCH);
      stream.next(m.ROLL);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::projet::IMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::projet::IMU_<ContainerAllocator>& v)
  {
    s << indent << "YAW: ";
    Printer<float>::stream(s, indent + "  ", v.YAW);
    s << indent << "PITCH: ";
    Printer<float>::stream(s, indent + "  ", v.PITCH);
    s << indent << "ROLL: ";
    Printer<float>::stream(s, indent + "  ", v.ROLL);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJET_MESSAGE_IMU_H
